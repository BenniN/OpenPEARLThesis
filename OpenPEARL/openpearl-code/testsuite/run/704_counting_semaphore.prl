/*#############################################################################
PROGRAM

The same result like 703_oneSemaphore_diffPrio.prl,

with the difference that here are counting semaphore with the start value 100.
The both Writer Task write a value (1 or 2) in a array with the size of 100.
After every write action the array pinter (write) increment.
After the both writer wrote 100 times in the array, the main check that at
the first 50th sign in the array are 2 and the last 50 are 1.
Therefore, there is exactly one task switch between Writer_1 and Writer_2.

#############################################################################*/

MODULE(counting_semaphore);

PROBLEM;

DCL S1 SEMA PRESET (100);
DCL (S2, S3, S4) SEMA;
DCL (write) FIXED (15) INIT(0);
__cpp__(' int buffer [100]; ');

Main : TASK PRIO 1 MAIN;

    ACTIVATE Writer_1;
    ACTIVATE Writer_2;

    REQUEST S3;
    REQUEST S3;
    RELEASE S4;
    RELEASE S4;

    !Waiting until both Writer Tasks a ready with his work   
    REQUEST S3;
    REQUEST S3;
   
  ! Control output form the buffer array 
  !  __cpp__(
  !  'for (int i = 0; i < 100; i++) {'
  !  'printf ("buffer[%d] : %d \\n" ,i, buffer [i]); '
  !  '}');

    __cpp__(
    'int check = 100;'
    'for (int j = 0; j < 100; j++) {'
    '   if (j < 50) {'
    '       if (buffer[j] == 2)'
    '           check -= 1;'
    '   }else {'
    '       if (buffer[j] == 1)'
    '           check -= 1;'
    '   }'
    '}'
    'if (check == 0) {'
    '   pearlrt::Control::setExitCode(0);'
    '   printf("*** SUCCESS *** \\n");'
    '}else {'
    '   pearlrt::Control::setExitCode(1);'
    '   printf("*** FAILED *** \\n");'
    '}');

END;


Writer_1 : TASK PRIO 3;
   
    RELEASE S3;
    REQUEST S4;

    __cpp__(
    'int i = 0;'
    'while (i < 50) {');
        REQUEST S1;
            __cpp__(
            'buffer [_write.x] = 1;'
            'if ( (_write.x + 1) > 99) {' );
                write := 0;
            __cpp__(
            '}else { ');
                write := write + 1;
            __cpp__(
            '}'
            'i += 1;');

        RELEASE S2;
    __cpp__(
    '}');
    RELEASE S3;
END;

Writer_2 : TASK PRIO 2;

    RELEASE S3;
    REQUEST S4;

    __cpp__(
    'int i = 0;'
    'while (i < 50) {');
        REQUEST S1;
            __cpp__(
            'buffer [_write.x] = 2;'
            'if ( (_write.x + 1) > 99) {');
                write := 0;
            __cpp__(
            '}else { ');
                write := write + 1;
            __cpp__(
            '}'
            'i += 1;');
          
        RELEASE S2;    
    __cpp__(
    '}');
    RELEASE S3;
END;

MODEND;
