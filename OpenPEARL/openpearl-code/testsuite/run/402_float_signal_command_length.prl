/*###################################################################
PROGRAM
It catch the both float signals:
	FloatIsNaNSignal
	FloatIsINFSignal
Then it gives a big command expression over 1600 Characters with the
result 1.0.
####################################################################
RESULT
The variable check musst have the value zero. The start value is
3. When it comes the Signals, the variable check where decrement
and when the result from the big expression is one with a tolerance
from epsilon.
##################################################################*/

MODULE(float_signals);

PROBLEM;

Main : TASK MAIN;

    DCL check FIXED(15)    				INIT(3);
    DCL (result1, result2) FLOAT(53) 	INIT(0.0,0.0);
	DCL (result2_53, result3_53, real)  FLOAT(53) INIT(0.0,0.0,1.0);
	DCL epsilon			   				FLOAT(53) INIT(0.0);

	epsilon := 1.0 * ((10.0) **(-14));

	__cpp__(
    'try {');

        result1 := SQRT( -1.0);
    __cpp__(
    '}catch (pearlrt::FloatIsNaNSignal &s) {');
        check := check - 1;    
		!__cpp__('printf ("TRY CATCH ONE \\n");' );
    __cpp__(
    '}');


	__cpp__(
    'try {');

        result2 := 1.0 / 0;
    __cpp__(
    '}catch (pearlrt::FloatIsINFSignal &s) {');
        check := check - 1;    
		!__cpp__('printf ("TRY CATCH TWO \\n");' );
    __cpp__(
    '}');


	result2_53 := 1.0 * ( ((((((((((((((((3.4 + 2.1) - (1.0 - 1.0)) / 1.0) / 1.0) + 1.0 + 1.0 + 2.0) * 1.0) ** 1) - 1.0) + 1.0) ** 0) + 2.0 + 2.0) / 2.0) / 1.0) +  (((((((((((((((3.4 + 2.1) - (1.0 - 1.0)) / 1.0) / 1.0) + 1.0 + 1.0 + 2.0) * 1.0) ** 1) - 1.0) + 1.0) ** 0) + 2.0 + 2.0) / 2.0) / 1.0) ) - ((((((((((((3.4 + 2.1) - (1.0 - 1.0)) / 1.0) / 1.0) + 1.0 + 1.0 + 2.0) * 1.0) ** 1) - 1.0) + 1.0) ** 0) + 2.0 + 2.0) / 2.0) / 1.0) ) + ( (((((((((((((3.4 + 2.1) - (1.0 - 1.0)) / 1.0) / 1.0) + 1.0 + 1.0 + 2.0) * 1.0) ** 1) - 1.0) + 1.0) ** 0) + 2.0 + 2.0) / 2.0) / 1.0) +  (((((((((((((((3.4 + 2.1) - (1.0 - 1.0)) / 1.0) / 1.0) + 1.0 + 1.0 + 2.0) * 1.0) ** 1) - 1.0) + 1.0) ** 0) + 2.0 + 2.0) / 2.0) / 1.0) ) - ((((((((((((3.4 + 2.1) - (1.0 - 1.0)) / 1.0) / 1.0) + 1.0 + 1.0 + 2.0) * 1.0) ** 1) - 1.0) + 1.0) ** 0) + 2.0 + 2.0) / 2.0) / 1.0) )) - (( (((((((((((((3.4 + 2.1) - (1.0 - 1.0)) / 1.0) / 1.0) + 1.0 + 1.0 + 2.0) * 1.0) ** 1) - 1.0) + 1.0) ** 0) + 2.0 + 2.0) / 2.0) / 1.0) +  (((((((((((((((3.4 + 2.1) - (1.0 - 1.0)) / 1.0) / 1.0) + 1.0 + 1.0 + 2.0) * 1.0) ** 1) - 1.0) + 1.0) ** 0) + 2.0 + 2.0) / 2.0) / 1.0) ) - ((((((((((((3.4 + 2.1) - (1.0 - 1.0)) / 1.0) / 1.0) + 1.0 + 1.0 + 2.0) * 1.0) ** 1) - 1.0) + 1.0) ** 0) + 2.0 + 2.0) / 2.0) / 1.0) ) + ( (((((((((((((3.4 + 2.1) - (1.0 - 1.0)) / 1.0) / 1.0) + 1.0 + 1.0 + 2.0) * 1.0) ** 1) - 1.0) + 1.0) ** 0) + 2.0 + 2.0) / 2.0) / 1.0) +  (((((((((((((((3.4 + 2.1) - (1.0 - 1.0)) / 1.0) / 1.0) + 1.0 + 1.0 + 2.0) * 1.0) ** 1) - 1.0) + 1.0) ** 0) + 2.0 + 2.0) / 2.0) / 1.0) ) - ((((((((((((3.4 + 2.1) - (1.0 - 1.0)) / 1.0) / 1.0) + 1.0 + 1.0 + 2.0) * 1.0) ** 1) - 1.0) + 1.0) ** 0) + 2.0 + 2.0) / 2.0) / 1.0) ))) + 1.0 );
	
	result3_53 := ABS(real - result2_53);

	IF result3_53 < epsilon THEN
		check := check - 1;
	FIN;
		

	IF check == 0 THEN
		__cpp__(
		'pearlrt::Control::setExitCode(0);'
    	'printf ("*** SUCCESS ***\\n");' );
	ELSE
		__cpp__(
		'pearlrt::Control::setExitCode(1);'
    	'printf ("*** FAILED ***\\n");' );
	FIN;

		

END;
MODEND;
