MODULE (array_dcl);

PROBLEM;

!DCL moduleArray(10,20) FIXED;

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! test for data types
!  check the result manually in the c++-code, 
!  the arrays must have the data type as indicated
!  by the array name
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
test_data_types: PROC;
!  DCL (f1,f2) FIXED(10) INIT(42,43);
  DCL fixed15_10(10) FIXED(15) INIT(1,2,3);
!  DCL (BIT1,BIT2,BIT3,BIT4,BIT5,BOT6,BIT7) BIT(3) INIT ('000'B1, '001'B1, '010'B1, '011'B, '100'B, '101'B,'111'B1);
!  DCL BIT3_20(20) BIT(3) INIT ('000'B1, '001'B1, '010'B1, '011'B, '100'B, '101'B,'111'B1);
!  DCL float24_5(5) FLOAT(23) INIT(1.0, 2.0,3.0, -1.0);
!   DCL float53_5(5) FLOAT(52) INIT(1.0, 2.0,3.0, -1.0);
!   DCL dur_10_1(10) DURATION INIT(1HRS, 1 MIN, -1 SEC);
!   DCL dur_10_2(10) DURATION INIT(1HRS, 1 MIN, 1 SEC);
!   DCL clk_10(10) CLOCK INIT(12:00:01 , 01:01:01);
!   DCL char30_10(10) CHARACTER(30) INIT('A', 'B');
END;

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 3x3 Matrix multiplication
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
test_matmul : PROC;
 /*
    DCL MA(1:3,1:3) FLOAT INIT(1.0, 2.0, 3.0,
                               4.0, 5.0, 6.0,
                               7.0, 8.0, 9.0);

    DCL MB(1:3,1:3) FLOAT INIT(9.0, 8.0, 7.0,
                               6.0, 5.0, 4.0,
                               3.0, 2.0, 1.0);

    DCL MC(1:3,1:3) FLOAT INIT(0.0);

    DCL ME(1:3,1:3) FLOAT INIT( 30.0,  24.0, 18.0,
                                84.0,  69.0, 54.0,
                               138.0, 114.0, 90.0);

    DCL rc          BIT(1) INIT('0'B);

    ! Initialize matrix MA
    MA(1,1) := 1.0;     MA(1,2) := 2.0;     MA(1,3) := 3.0;
    MA(2,1) := 4.0;     MA(2,2) := 5.0;     MA(2,3) := 6.0;
    MA(3,1) := 7.0;     MA(3,2) := 8.0;     MA(3,3) := 9.0;

    ! Initialize matrix MB
    MB(1,1) := 9.0;     MB(1,2) := 8.0;     MB(1,3) := 7.0;
    MB(2,1) := 6.0;     MB(2,2) := 5.0;     MB(2,3) := 4.0;
    MB(3,1) := 3.0;     MB(3,2) := 2.0;     MB(3,3) := 1.0;

    ! Initialize matrix MC
    FOR i FROM 1 BY 1 TO 3
    REPEAT
        FOR j FROM 1 BY 1 TO 3
        REPEAT
            MC(i,j) := 0.0;
        END;
    END;

    ! Expected result im ME:
    ME(1,1) :=  30.0;     ME(1,2) :=  24.0;     ME(1,3) := 18.0;
    ME(2,1) :=  84.0;     ME(2,2) :=  69.0;     ME(2,3) := 54.0;
    ME(3,1) := 138.0;     ME(3,2) := 114.0;     ME(3,3) := 90.0;

    __cpp__("printf(\"\\nMA:\\n\");");

    FOR i FROM 1 LWB MA BY 1 TO 1 UPB MA
    REPEAT
        FOR j FROM 2 LWB MA BY 1 TO 2 UPB MA
        REPEAT
            DCL f   FLOAT;

            f := MA(i,j);
            __cpp__("printf(\"%10.4f  \",_f.x);");
        END;

        __cpp__( "printf(\"\\n\");"         );

    END;

    __cpp__("printf(\"\\nMB:\\n\");");

    FOR i FROM 1 LWB MB BY 1 TO 1 LWB MB	
    REPEAT
        FOR j FROM 2 LWB MB BY 1 TO 2 UPB MB
        REPEAT
            DCL f   FLOAT;

            f := MB(i,j);
            __cpp__("printf(\"%10.4f  \",_f.x);");
        END;

        __cpp__( "printf(\"\\n\");"         );

    END;

    __cpp__("printf(\"\\nMC:\\n\");");

    FOR i FROM 1 BY 1 TO 3
    REPEAT
        FOR j FROM 1 BY 1 TO 3
        REPEAT
            DCL f   FLOAT;

            f := MC(i,j);
            __cpp__("printf(\"%10.4f  \",_f.x);");
        END;

        __cpp__( "printf(\"\\n\");"         );

    END;

    __cpp__("printf(\"\\nME:\\n\");");

    FOR i FROM 1 LWB ME BY 1 TO 1 UPB ME
    REPEAT
        FOR j FROM 2 LWB ME BY 1 TO 2 UPB ME
        REPEAT
            DCL f   FLOAT;

            f := ME(i,j);
            __cpp__("printf(\"%10.4f  \",_f.x);");
        END;

        __cpp__( "printf(\"\\n\");"         );

    END;

    ! perform calculation:
    FOR i FROM 1 BY 1 TO 3
    REPEAT
        FOR j FROM 1 BY 1 TO 3
        REPEAT
!        BEGIN
            DCL sum FLOAT INIT(0.0);

            FOR k FROM 1 TO 3
            REPEAT
                sum := sum + MA(i,k) * MB(k,j);
            END;

            MC(i,j) := sum;
!       END;
        END;
    END;

    ! Check the results:
    FOR i FROM 1 BY 1 TO 3
    REPEAT
        FOR j FROM 1 BY 1 TO 3
        REPEAT
            IF ME(i,j) /= MC(i,j) THEN
                rc := '1'B1;
                __cpp__(
                    "       printf(\"ERROR: Indices %d:%d!\\n\", _i.x, _j.x);"
                    "       pearlrt::Control::setExitCode(1);"
                );
            FIN;
        END;
    END;

    __cpp__("printf(\"\\nResult:\\n\");");

    FOR i FROM 1 BY 1 TO 3
    REPEAT
        FOR j FROM 1 BY 1 TO 3
        REPEAT
            DCL f   FLOAT;

            f := MC(i,j);
            __cpp__("printf(\"%10.4f  \",_f.x);");
        END;

        __cpp__( "printf(\"\\n\");"         );

    END;

    IF rc EQ '1'B
    THEN
        __cpp__(
            "       printf(\"ERROR: Matrix muliplication failed!\\n\");"
            "       pearlrt::Control::setExitCode(1);"
        );
    FIN;
    */
END;

T1: TASK MAIN;
/*
    DCL switch_on(1:3)              BIT(4);
    DCL x(10:20)                    FIXED(31);
    DCL y(1:10,10:20)               FIXED;
    DCL z(1:3,1:3)                  FLOAT(23);
    DCL zz(1:10)                    CHAR(1);
    DCL clock_array(1:10)           CLOCK;
    DCL duration_array(10:20)       DURATION;

    DCL ref_fixed_array(1:2)        REF FIXED(10);
    DCL ref_float_array(1:2)        REF FLOAT(23);
    DCL ref_char_array(1:2)         REF CHAR(10);
    DCL ref_bit_array(1:2)          REF BIT;

    x(10) := 42;
    y(10,15) := 0;

    x(10) := x(15) * x(14);

    switch_on(1) := '0001'B1;
    switch_on(2) := '0010'B1;
    switch_on(3) := '0100'B1;

    CALL test_matmul;
    CALL arrayOperators;
*/
END;

!!!!!!!!!
!! access module defined array
!!!!!!!!!
accessModuleArray: PROC;
!   moduleArray(1,1) := 0;
END;

!!!!!!!!!!!!!!
! Test array operators 
!!!!!!!!!!!!!!
arrayOperators: PROC;
/*
   FOR i FROM 1 LWB moduleArray TO 1 UPB moduleArray REPEAT
      FOR j TO 2 UPB moduleArray REPEAT
          moduleArray(i,j) := 10*i+j;
      END;
   END;
*/
END;

MODEND;

