MODULE(rst);
SYSTEM;
! Disc defines a folder on the file system. The second parameters
! denotes the maximum number of simultaneous open files
disc: Disc('/tmp/' ,10);
stdout: StdOut;

PROBLEM;
   SPC disc DATION INOUT SYSTEM ALL;
   SPC stdout DATION OUT SYSTEM ALPHIC;
   DCL stdOut DATION OUT ALPHIC DIM(*,80) FORWARD CREATED(stdout);


DCL table DATION INOUT FIXED(15) DIM(*) DIRECT CREATED(disc);
FileTest1: TASK MAIN;
     DCL f FIXED(15) INIT(42);
     DCL (f4,f5) FIXED(15) INIT(0,0);
     DCL error   FIXED;	
     DCL error15 FIXED(15);
     DCL error16 FIXED(16);
     DCL error20 FIXED(20);
     DCL error31 FIXED(31);

     DCL error14 FIXED(14);
     DCL error10 FIXED(10);			
     DCL error1  FIXED(1);
     DCL error0  FIXED(0);     
     
     OPEN stdOut;
     OPEN table BY ANY,IDF('file1.txt');

     WRITE f4 TO table;
     WRITE f4 TO table;
     WRITE f4 TO table;
     WRITE f4 TO table;
     WRITE f4 TO table;
     WRITE f4 TO table;
     WRITE f4 TO table;

     WRITE f TO table BY POS(4), RST(error), POS(5);
     READ f5,f4 FROM table BY RST(error15), POS(4), POS(5);
     READ f4 FROM table BY RST(error16), POS(4);
     READ f5 FROM table BY RST(error20), POS(5);
     READ f4 FROM table BY RST(error31), POS(4);

!!     READ f4 FROM table BY RST(error14), POS(4); ! this should produce a semantic error	
!!     READ f4 FROM table BY RST(error10), POS(4); ! this should produce a semantic error
!!     READ f4 FROM table BY RST(error1), POS(4); ! this should produce a semantic error
!!     READ f4 FROM table BY RST(error0), POS(4); ! this should produce a semantic error     
     CLOSE table;

     error := 0;
     
     IF (error31 /= 0) THEN
     	PUT 'error: RST-value should be zero (', error31 ,') ' TO stdOut 
       	    BY A, F(3), A, SKIP;
       
	__cpp__("pearlrt::Control::setExitCode(1);");
     FIN;

     IF (f /= f5) THEN
     	PUT 'error: did not read the same value (', f,',', f5,') ' TO stdOut
       	    BY A,F(6),A,F(6),A, SKIP;
        __cpp__("pearlrt::Control::setExitCode(1);");
        error = 1;
     FIN;
     
     IF (f4 /= 0) THEN
     	PUT 'error: f4 should be zero (', f4, ') ' TO stdOut 
       	    BY A, F(6),A,SKIP;
   	    __cpp__("pearlrt::Control::setExitCode(1);");
   	    error = 1;
     FIN;

     IF error == 0 THEN
     	PUT 'success' TO stdOut BY A, SKIP;
     FIN;
END;
     
MODEND;


