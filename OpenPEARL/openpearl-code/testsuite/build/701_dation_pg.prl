MODULE(dationpg);
! declare a PG-dation on a disc file and do some operations
SYSTEM;
! Disc defines a folder on the file system. The second parameters
! denotes the maximum number of simultaneous open files
disc: Disc('/tmp/' ,10);
stdout: StdOut;

PROBLEM;

   SPC disc DATION INOUT SYSTEM  ALL;
   SPC stdout DATION OUT SYSTEM  ALPHIC;

   DCL table DATION INOUT ALPHIC DIM(*,80)
             FORWARD NOCYCL  NOSTREAM 
             CREATED(disc);
   DCL term DATION OUT ALPHIC DIM(*,80) FORWARD CREATED(stdout);

FileTest1: TASK MAIN;
     DCL f FIXED(15);
     DCL f1 FIXED(15);
     DCL text CHAR(5) INIT(' f = ');
     DCL text1 CHAR(5);

     OPEN term;
 
     OPEN table BY ANY, IDF('file1.txt');
     PUT text, f TO table BY  X(3), A,F(3), SKIP;
     PUT text, f TO table BY A, F(3), SKIP;
     CLOSE table;

     OPEN table BY OLD, IDF('file1.txt');
     GET text1, f1 FROM table BY  X(3), A,F(3);
     CLOSE table;

        
     OPEN table BY ANY, IDF('file1.txt');
     FOR i TO 10 REPEAT
        PUT text1, i TO table BY  X(3), A,F(3), SKIP;
     END;
     CLOSE table;

     OPEN table BY OLD, IDF('file1.txt');
     FOR i TO 10 REPEAT
        GET f1 FROM table BY X(8),F(3);
        GET FROM table BY SKIP;
     END;
     CLOSE table;

     testFormats;
     putArraySlice;
     getArraySlice;

     CLOSE term;
END;

testFormats: PROC;
   DCL c1 CHAR(20) INIT('123');
   DCL dur DURATION INIT(12.3SEC);
   DCL clk CLOCK INIT (1:30:2.3);
   DCL float FLOAT INIT(12.3); 
   DCL fixed FIXED INIT(12); 
   DCL bit BIT(1) INIT('1'B1);
   DCL bit17 BIT(17) INIT('10110011100011110'B1);

   OPEN table BY ANY, IDF('file1.txt');
   PUT c1 TO table BY A,SKIP;
   PUT dur TO table BY D(13,6),SKIP;
   PUT clk TO table BY T(13,4),SKIP;
   PUT float TO table BY F(13),SKIP;
   PUT float TO table BY F(13,6),SKIP;
   PUT float TO table BY E(13,6,7),SKIP;
   PUT float TO table BY E(19,6,7),SKIP;
   PUT float TO table BY E3(19,6,7),SKIP;
   PUT fixed TO table BY F(13,6),SKIP;
   PUT fixed TO table BY F(13),SKIP;
   PUT bit TO table BY B1(1),SKIP;
   PUT bit TO table BY B2(1),SKIP;
   PUT bit TO table BY B3(1),SKIP;
   PUT bit TO table BY B4(1),SKIP;
   PUT bit17 TO table BY B1(17),SKIP;
   PUT bit17 TO table BY B2(9),SKIP;
   PUT bit17 TO table BY B3(6),SKIP;
   PUT bit17 TO table BY B4(5),SKIP;
   CLOSE table;

   OPEN table BY ANY, IDF('file1.txt');
   GET c1 FROM table BY A;
   GET dur FROM table BY SKIP,D(13,6);
   GET clk FROM table BY SKIP,T(13,4);
   GET float FROM table BY SKIP,F(13);
   GET float FROM table BY SKIP,F(13,6);
   GET float FROM table BY SKIP,E(13,6,7);
   GET float FROM table BY SKIP,E(19,6,7);
   GET float FROM table BY SKIP,E3(19,6,7);
   GET fixed FROM table BY SKIP,F(13,6);
   GET fixed FROM table BY SKIP,F(13);
   GET bit FROM table BY SKIP,B1(1);
   GET bit FROM table BY SKIP,B2(1);
   GET bit FROM table BY SKIP,B3(1);
   GET bit FROM table BY SKIP,B4(1);
   CLOSE table;

END;

putArraySlice: PROC;
   DCL data(10) FIXED;
   DCL error FIXED;
   DCL text CHAR(20);
   DCL (start,end) FIXED INIT(2,4);

   FOR i TO 10 REPEAT
      data(i) := i;
   END; 
   !---
   OPEN table BY ANY, IDF('file1.txt');
   PUT data(2:4) TO table BY F(3);
   CLOSE table;
   OPEN table BY ANY, IDF('file1.txt');
   GET text FROM table BY A(9);
   CLOSE table;
   IF text NE '  2  3  4' THEN
      PUT 'putArraySlice failed @1' TO term BY A, SKIP;
   FIN; 

   !---
   OPEN table BY ANY, IDF('file1.txt');
   PUT data(start:end) TO table BY F(3);
   CLOSE table;
   OPEN table BY ANY, IDF('file1.txt');
   GET text FROM table BY A(9);
   CLOSE table;
   IF text NE '  2  3  4' THEN
      PUT 'putArraySlice failed @2' TO term BY A, SKIP;
   FIN; 

   !---
   OPEN table BY ANY, IDF('file1.txt');
   PUT data(end:start) TO table BY RST(error),F(3);
   CLOSE table;
   IF error NE 326 THEN
      PUT 'putArraySlice failed @3' TO term BY A, SKIP;
   FIN; 

END;


getArraySlice: PROC;
   DCL data(10) FIXED;
   DCL expect(10) FIXED INIT(0,2,3,4,0,0,0,0,0,0);
   DCL error FIXED;
   DCL text CHAR(20);
   DCL (start,end) FIXED INIT(2,4);

   FOR i TO 10 REPEAT
      data(i) := 0;
   END; 
   !---
   OPEN table BY ANY, IDF('file1.txt');
   PUT '  2  3  4' TO table BY A;
   CLOSE table;
   OPEN table BY ANY, IDF('file1.txt');

   GET data(2:4) FROM table BY F(3);
   CLOSE table;
   FOR i TO 10 REPEAT
      IF data(i) NE expect(i) THEN
         PUT 'getArraySlice failed @1' TO term BY A, SKIP;
      FIN; 
   END;

   !---
   OPEN table BY ANY, IDF('file1.txt');
   GET data(start:end) FROM table BY F(3);
   CLOSE table;
   FOR i TO 10 REPEAT
      IF data(i) NE expect(i) THEN
         PUT 'getArraySlice failed @2' TO term BY A, SKIP;
      FIN; 
   END;

   !---
   OPEN table BY ANY, IDF('file1.txt');
   GET data(end:start) FROM table BY RST(error),F(3);
   CLOSE table;
   IF error NE 326 THEN
      PUT 'getArraySlice failed @3' TO term BY A, SKIP;
   FIN; 

END;

MODEND;

