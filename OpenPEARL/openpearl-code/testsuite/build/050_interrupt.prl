MODULE(irupt);
/*
T1 starts the system and controlls the behavior
  via int1 T2 ist started
  T2 sets a start marker and waits repeatedly to be continued via int2
     the repaet loop is terminated by a global flag
  T1 triggers int2 several times and verifies the continuation count from T2

  T1 activates T3 with delayed start and repeatedly over a duration
     during this time T1 monitors the activation counter from T3
*/

SYSTEM;
int1: SoftInt(1);
int2: SoftInt(2);
stdOut: StdOut;

PROBLEM;
SPC stdOut DATION OUT SYSTEM ALPHIC ;
DCL con DATION OUT ALPHIC DIM(*,80) FORWARD CREATED(stdOut);

!SPC ctrlc INTERRUPT;
! extern pearlrt::Interrupt * _ctrlc ;
SPC int1 INTERRUPT;
SPC int2 INTERRUPT;
! extern pearlrt::Interrupt * _int1 ;

DCL t2_run BIT INIT('0'B1);
DCL success BIT(1) INIT ('1'B1);
DCL  t2KeepRunning BIT(1) INIT ('1'B1);
DCL t2Counter FIXED INIT(0);
DCL t3Counter FIXED INIT(0);

T1: TASK MAIN;


    OPEN con;
    ENABLE int1;
    ENABLE int2;

    WHEN int1 ACTIVATE T2 PRIO 10;
    TRIGGER int1;
    AFTER 0.5 SEC RESUME;
    TO 5 REPEAT 
       TRIGGER int2;
       PUT NOW, '*** int2 triggered' TO con BY T(13,1), X, A, SKIP;
       AFTER 0.5 SEC RESUME;
    END;
    t2KeepRunning := '0'B1;
    TRIGGER int2;
    AFTER .5 SEC RESUME;
    PUT '*** t2 should be terminated now' TO con BY A, SKIP;
    IF t2Counter NE 6 THEN
        PUT '*** loops in t2 (should be 6): ', t2Counter 
        TO con BY A, F(6), SKIP;
        success = '0'B1;
    ELSE
       PUT '*** loops in t2 are ok' TO con BY A,  SKIP;
    FIN;

    ! remove all schedules for T2
    PREVENT T2;
   
!....................


       ! das DURING startet nach der Startverzoegerung!
       ! T3 Schedule ist nach 5+4.5 sec vorbei, nachdem der Int 
       ! ausgeloest wurde --> nach 10 s
    WHEN int1 AFTER 5 SEC ALL 1 SEC DURING 4.5 SEC ACTIVATE T3 PRIO 30;
    AFTER 0.5 SEC RESUME;
    PUT NOW, '*** trigger int1 for T3 - T3 should start in 5 sec' TO con
        BY T(13,1), X, A , SKIP;
    TRIGGER int1;
    AFTER 11 SEC RESUME; ! schedule of T3 should be over now
    IF t3Counter NE 5 THEN
       PUT '*** expected t3Counter as 5, but it is:', t3Counter TO con
       BY A, F(6), SKIP;
       success := '0'B1;
    ELSE
       PUT '*** t3Counter is 5 as expected' TO con BY A, SKIP;
    FIN;


    IF NOT success THEN
       PUT '*** fail ***' TO con BY A, SKIP;
 __cpp__("pearlrt::Control::setExitCode(1);");
    ELSE
       PUT '*** success ***' TO con BY A, SKIP;
    FIN;

    PREVENT T3;

END;

T2: TASK;
    t2_run = '1'B1;
    WHILE t2KeepRunning REPEAT
! this delay is necessary to avoid duplicate triggers - this must be solved 
! in the runtime system
! if the dalay is preset, the program doies not end
!       AFTER 0.1 SEC RESUME;
       WHEN int2 CONTINUE;
       SUSPEND;
       t2Counter := t2Counter + 1;
       PUT NOW,'T2: counter=', t2Counter TO con BY T(13,1), X, A, F(6), SKIP;
    END;
    PUT '*** t2 terminated' TO con BY A, SKIP;
END;

T3: TASK;
       t3Counter := t3Counter + 1;
       PUT NOW,'T3: counter=', t3Counter TO con BY T(13,1),X,A, F(6), SKIP;
END;

MODEND;

