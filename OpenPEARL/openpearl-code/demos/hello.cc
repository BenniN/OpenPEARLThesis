/////////////////////////////////////////////////////////////////////////////
// PROLOGUE
/////////////////////////////////////////////////////////////////////////////
#include <PearlIncludes.h>

namespace pearlrt {
    extern int createSystemElements();
}

static int dummy = pearlrt::createSystemElements();

const char* filename = (char*) "hello.prl";


/////////////////////////////////////////////////////////////////////////////
// CONSTANT POOL
/////////////////////////////////////////////////////////////////////////////
static /*const*/ pearlrt::Fixed<31>         CONST_FIXED_P_0_31(0);
static /*const*/ pearlrt::Fixed<31>         CONST_FIXED_P_1_31(1);
static /*const*/ pearlrt::Fixed<31>         CONST_FIXED_N_1_31(-1);
static /*const*/ pearlrt::Fixed<31>         CONST_FIXED_P_80_31(80);
static /*const*/ pearlrt::Character<11>         CONST_CHARACTER_89ccbb0f_5075_4b4c_8a9e_0fbf3da105a3("Hello World");

/////////////////////////////////////////////////////////////////////////////
// TASK SPECIFIERS
/////////////////////////////////////////////////////////////////////////////
SPCTASK(_hello);

/////////////////////////////////////////////////////////////////////////////
// STRUCTURE FORWARD DECLARATIONS
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
// STRUCTURE DECLARATIONS
/////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////
// SYSTEM PART
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
// PROBLEM PART
/////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////
// DATION SPECIFICATIONS
/////////////////////////////////////////////////////////////////////////////
extern pearlrt::Device *d_stdout;
static pearlrt::SystemDationNB* _stdout = static_cast<pearlrt::SystemDationNB*>(d_stdout); 



/////////////////////////////////////////////////////////////////////////////
// DATION DECLARATIONS
/////////////////////////////////////////////////////////////////////////////
static pearlrt::DationDim2 h_dim_termout(80); 
pearlrt::DationPG _termout(_stdout, pearlrt::Dation::OUT  | pearlrt::Dation::FORWARD | pearlrt::Dation::STREAM, &h_dim_termout);



/////////////////////////////////////////////////////////////////////////////
// CONSTANT SEMAPHORE ARRAYS
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
// CONSTANT BOLT ARRAYS
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
// ARRAY DESCRIPTORS
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
// TASK DECLARATIONS
/////////////////////////////////////////////////////////////////////////////
DCLTASK(_hello, (pearlrt::Prio( (pearlrt::Fixed<15>)255)), ((pearlrt::BitString<1>)1)) {
        me->setLocation(16, filename);
        {
            _termout.dationOpen(
                0
            , (pearlrt::Character<1>*) 0
            , (pearlrt::Fixed<31>*) 0
            );
        }


        me->setLocation(17, filename);
        // put statement 
        {
           static pearlrt::IOFormatEntry formatEntries[]  = {
          {
             .format=pearlrt::IOFormatEntry::A
          },
          {
             .format=pearlrt::IOFormatEntry::SKIP,
             .fp1={.f31=CONST_FIXED_P_1_31}
          }
        };


           pearlrt::IODataEntry dataEntries[]  = {
             {
                .dataType={pearlrt::IODataEntry::CHAR,11},
                .dataPtr={.outData=&CONST_CHARACTER_89ccbb0f_5075_4b4c_8a9e_0fbf3da105a3},
                .param1={.numberOfElements = 1}
             }
           };

           pearlrt::IODataList dataList = {
             .nbrOfEntries=sizeof(dataEntries)/sizeof(dataEntries[0]),
             .entry=dataEntries};
          static pearlrt::IOFormatList formatList = {
             .nbrOfEntries=sizeof(formatEntries)/sizeof(formatEntries[0]),
             .entry=formatEntries};
          _termout.put(me, &dataList , &formatList);
        }


        me->setLocation(18, filename);
          _termout.dationClose(0, (pearlrt::Fixed<15>*) 0);



}



