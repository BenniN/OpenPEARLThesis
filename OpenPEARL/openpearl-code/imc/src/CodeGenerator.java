/*
 [A "BSD license"]
 Copyright (c) 2016 Rainer Mueller
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:

 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * create C++ code for the detected elements
 * 
 * The order of definitions in the source code does not strictly depend on the
 * sequence in the PEARL code. The order is dominated by the sequence of
 * definition, which is overwritten if forward usage is detected.
 * 
 * @author mueller
 * 
 */

/**
 * The code generater class creates the C++-file with the system information
 * 
 * OpenPEARL make an intensive use of static obkects. The sequence instanciation
 * of these objects in not defined across compilation units. User dation on
 * module level are static objects, which need an already instanciated system
 * device. To enshure the instanciation of these system device, they must be
 * defibned static in an simple function with is called to initialize a simple
 * variable in the user module like: int x=SystemPart::createDevices();
 * 
 * The file with the system part constists of the following elements: 1) a
 * header section 2) simple object definitions and pointer to system devices 3)
 * a function 'createDevices()' 4) with a body defining the system devices 5)
 * function and module termination
 * 
 * part 2 and 4 are created in strings and printed, when the system information
 * is processed
 * 
 * @author mueller
 * 
 */
public class CodeGenerator {
	private static StringBuilder simpleElements = new StringBuilder();
	private static StringBuilder functionBody = new StringBuilder();
	/*
	 * create to output file with to complete content
	 * 
	 * if errors like loops in definition are detected, an error message occurs
	 */
	public static void create(String outputFile) {
		
		PrintWriter file;

		try {
			file = new PrintWriter(new FileWriter(outputFile));
		} catch (IOException e) {
			System.err.println("could not create output file");

			e.printStackTrace();
			return;
		}
		file.println("// [automatic generated by intermodule checker (imc) -- do not change ]");
		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		Date date = new Date();
		file.println("// "+dateFormat.format(date)+"\n");
		file.println("#include \"PearlIncludes.h\" \n");


		// instanciate Log first
		for (int i = 0; i < SystemEntries.size(); i++) {
			SystemEntry un = SystemEntries.get(i);
			if (un.getSystemName().equals("Log")) {
				Error.setLocation(un.getFileName(), un.getLine());
				doAllPrerequistes(un,10);
			}	
		}

		boolean otherNamesNeeded;
		boolean newCodeCreated;
		do {
			otherNamesNeeded = false;
			newCodeCreated = false;
			for (int i = 0; i < SystemEntries.size(); i++) {
				SystemEntry un = SystemEntries.get(i);
				if (!un.codeIsCompleted()) {
					SystemEntry req = un.requiresOtherSystemEntry();
					if (req == null) {
						un.getCompleteCode(simpleElements, functionBody);
						newCodeCreated = true;
					} else {
						// System.out.println("need "+req.getName()+" first");
						otherNamesNeeded = true;
					}
				}
				// }
			}
		} while (otherNamesNeeded == true && newCodeCreated == true);
		if (otherNamesNeeded == true && newCodeCreated == false) {
			for (int i = 0; i < SystemEntries.size(); i++) {
				SystemEntry un = SystemEntries.get(i);
				if (un.getType() != null) {
					if (!un.codeIsCompleted()) {
						Error.setLocation(un.getFileName(), un.getLine());
						Error.error("circular dependency detected at the definition of "
								+ un.getName());
						Error.append("needs "
								+ un.requiresOtherSystemEntry().getName());
					}
				}
			}

		}
		file.println("\n\nnamespace pearlrt {\n   int createSystemElements();");
		file.println("}\n");
		file.println("// enshure that the static (parametrized) objects are instanciated first");
		file.println("static int dummy = pearlrt::createSystemElements();");
		file.println();
		file.println(simpleElements);
		file.println("\n\nnamespace pearlrt {\n   int createSystemElements() {");
		file.println(functionBody);
		file.println("   return 0;");
		file.println("   }\n}");
		file.close();

	}

	private static void doAllPrerequistes(SystemEntry un, int remainingDepth) {
	   if (remainingDepth >= 0) {
	      SystemEntry req = un.requiresOtherSystemEntry();
	      if (req != null) {
		     doAllPrerequistes(req,remainingDepth-1);
	      }
		  un.getCompleteCode(simpleElements, functionBody);
	   } else {
		   Error.error("too long chain of associations");
	   }
	}
}
